<apex:page showHeader="false" sidebar="false" standardStylesheets="false" applyBodyTag="false" applyHtmlTag="false" lightningStylesheets="true">
 
    <html>
        <head>
            <apex:includeScript value="{!URLFOR($Resource.Babylon)}"/>
            <apex:includeScript value="{!URLFOR($Resource.babylonjsloaders)}"/>
            <apex:includeScript value="{!URLFOR($Resource.gltf_validator)}"/>
        </head>
        <style>
			html,
			body {
				overflow: hidden;
				width: 100%;
				height: 100%;
				margin: 0;
				padding: 0;
				/* border-radius: 4px; */
				overflow: hidden;
			}

			#renderCanvas {
				width: 100%;
				height: 100%;
				touch-action: none;
				outline: none;
			}
			.annotation {
				position: fixed;
				background: linear-gradient(to right, rgb(54, 55, 149), rgb(0, 92, 151));
				color: white !important;
				width: 30px;
				height: 30px;
				border-radius: 23px;
				border: none;
				box-sizing: border-box;
				transition: opacity 0.3s;
				cursor: pointer;
			}
			.annotationHolder {
				position: absolute;
				border-radius: 1rem;
				border: solid 1px black;
				z-index: 5;
				padding: 10px;
				word-break: break-word;
				background: rgba(255, 255, 255, 83%);
				backdrop-filter: saturate(180%) blur(20px);
				transform: translate(18px, -5px);
				display: none;
			}
			.annotationHolder > img {
				max-width: -webkit-fill-available;
				max-height: inherit;
			}
			.annotationHolder > video {
				max-width: -webkit-fill-available;
				max-height: inherit;
			}
			.annotationHolder > .content {
				contain: content;
				overflow: auto;
				min-width: 270px;
				max-width: 500px;
				max-height: 340px;
				color: black;
			}
			.crossButton {
				width: 30px;
				height: 30px;
				border-radius: 100%;
				position: fixed;
				right: -15px;
				top: -15px;
				display: flex;
				background: #94949452;
				align-items: center;
				border: none;
			}
			#dragBox{
				border: 2px solid rgb(0 128 255);
    			background-color: rgba(0, 122, 255, 0.5);
				position: absolute; 
				opacity: 0.3;
			}
		</style>
        <body>
            <canvas id="renderCanvas" style="width: 100%; height: 100vh;"></canvas>
            
            <script>
                window.getNonUtilityNodes = () => {
                    return scene.rootNodes.filter((itm) => {
                        return (
                            !itm.name.includes("BackgroundPlane") &&
                            (!itm.metadata || (itm.metadata && !itm.metadata.photoDome)) &&
                            !itm.name.includes("ground") &&
                            !itm.name.includes("light") &&
                            !itm.name.includes("fillLight") &&
                            !itm.name.includes("keyLight") &&
                            !itm.name.includes("rimLight") &&
                            !itm.name.includes("3DLayout") &&
                            !itm.name.includes("HemisphericalLight") &&
                            !itm.name.includes("camera") &&
                            !itm.name.includes("spotLight") &&
                            !itm.name.includes("default light")
                        );
                    });
                };
                window.setCameraFocus = async (param) => {
                    // let rootNode = param && param.node ? param.node : getNonUtilityNodes()[0];
                    // if (!rootNode) {
                    // 	console.warn("Root node not found. Using all top-level nodes.");
                    // 	rootNode = new BABYLON.Mesh("tempRoot", scene);
                    // 	scene.meshes.filter(mesh => !mesh.parent && mesh != rootNode).forEach(mesh => {
                    // 		mesh.setParent(rootNode);
                    // 	});
                    // }
                    function clampValue(value, min, max) {
                        return Math.max(-1.0e+100, Math.min(1.0e+100, value));
                    }
                    if (getNonUtilityMeshes().length === 0) {
                        return;
                    }
                    let boundingInfo = null;
                    let rootNode = param && param.node ? param.node : getNonUtilityNodes()[0];
                    if (!rootNode) {
                        let layout3D = scene.getTransformNodeByName("3DLayout");
                        if (layout3D.getChildren().length > 0) {
                            rootNode = layout3D;
                            boundingInfo = rootNode.getHierarchyBoundingVectors(true);
                        } else {
                            let rootNodes = getNonUtilityNodes();
                            boundingInfo = getWorldBoundingBoxForMeshes(rootNodes);
                        }
                    } else {
                        boundingInfo = rootNode.getHierarchyBoundingVectors(true);
                    }
                    boundingInfo.max = new BABYLON.Vector3(
                        clampValue(boundingInfo.max.x),
                        clampValue(boundingInfo.max.y),
                        clampValue(boundingInfo.max.z)
                    );
                
                    boundingInfo.min = new BABYLON.Vector3(
                        clampValue(boundingInfo.min.x),
                        clampValue(boundingInfo.min.y),
                        clampValue(boundingInfo.min.z)
                    );
                    let center = BABYLON.Vector3.Center(boundingInfo.min, boundingInfo.max);
                    let diagonal = BABYLON.Vector3.Distance(boundingInfo.max, boundingInfo.min);
                    let radius = diagonal / 2;
                
                    let camera = scene.activeCamera;
                    let aspectRatio = scene.getEngine().getAspectRatio(camera);
                    let adjustedRadius = radius / Math.min(1, aspectRatio);
                
                    let targetPosition = new BABYLON.Vector3(center.x, center.y, - center.z - adjustedRadius * 2.75);
                
                    const animationDuration = 500;
                    const frameRate = 60;
                
                    const easingFunction = new BABYLON.QuinticEase();
                    easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);
                
                    let animations = [];
                
                    if (param && param.setPosition) {
                        const positionAnimation = new BABYLON.Animation(
                            "cameraPosition",
                            "position",
                            frameRate,
                            BABYLON.Animation.ANIMATIONTYPE_VECTOR3,
                            BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT
                        );
                
                        positionAnimation.setKeys([
                            { frame: 0, value: camera.position },
                            { frame: frameRate * (animationDuration / 1000), value: targetPosition }
                        ]);
                
                        positionAnimation.setEasingFunction(easingFunction);
                        animations.push(positionAnimation);
                    }
                
                    const targetAnimation = new BABYLON.Animation(
                        "cameraTarget",
                        "target",
                        frameRate,
                        BABYLON.Animation.ANIMATIONTYPE_VECTOR3,
                        BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT
                    );
                
                    targetAnimation.setKeys([
                        { frame: 0, value: camera.target },
                        { frame: frameRate * (animationDuration / 1000), value: center }
                    ]);
                
                    targetAnimation.setEasingFunction(easingFunction);
                    animations.push(targetAnimation);
                
                    scene.stopAnimation(camera);
                
                    return new Promise((resolve) => {
                        scene.beginDirectAnimation(camera, animations, 0, frameRate * (animationDuration / 1000), false, 1).onAnimationEnd = () => {
                            camera.minZ = 0.1;
                            camera.maxZ = 10000;
                            resolve();
                        };
                    });
                };
                window.getNonUtilityMeshes = () => {
                    return scene.meshes.filter((itm) => {
                        return (
                            !itm.name.includes("BackgroundHelper") &&
                            (!itm.metadata || (itm.metadata && !itm.metadata.photoDome)) &&
                            !itm.name.includes("BackgroundPlane") &&
                            !itm.name.includes("ground") &&
                            !itm.name.includes("light") &&
                            !itm.name.includes("fillLight") &&
                            !itm.name.includes("keyLight") &&
                            !itm.name.includes("rimLight") &&
                            !itm.name.includes("camera") &&
                            !itm.name.includes("spotLight") &&
                            !itm.name.includes("default light") &&
                            !itm.name.includes("3DLayout") &&
                            !itm.name.includes("HemisphericalLight") &&
                            itm.getTotalVertices() > 0
                        );
                    });
                };
                async function loadGLBModel(url, position) {
                    try {
                        // Create default position if not provided
                        const modelPosition = position || { x: 0, y: 0, z: 0 };
                        
                        // Load the GLB file
                        const result = await BABYLON.SceneLoader.ImportMeshAsync(
                            "", // Meshes names
                            url, // URL to the GLB
                            "", // Optional root URL
                            scene, // The scene to load into
                            function(event) {
                                // Optional loading progress callback
                                const progress = event.loaded / event.total;
                                console.log(`Loading progress: ${progress * 100}%`);
                            }
                        );

                        // Get the bounding box info of the loaded model
                        const boundingInfo = result.meshes[0].getHierarchyBoundingVectors();
                        const modelHeight = boundingInfo.max.y - boundingInfo.min.y;
                        let node = result.meshes[0];
                        // Position model to sit on ground
                        node.position.y = modelHeight / 2;

                        // Enable shadow casting for the model
                        result.meshes.forEach(mesh => {
                            mesh.receiveShadows = true;
                            mesh.castShadows = true;
                        });

                        // Get the loaded meshes
                        const meshes = result.meshes;
                        
                        // Position the entire model
                        if (meshes.length > 0) {
                            const rootMesh = meshes[0]; // Get the root mesh
                            rootMesh.position = new BABYLON.Vector3(
                                modelPosition.x,
                                modelPosition.y,
                                modelPosition.z
                            );
                        }

                        // Enable shadows for all meshes
                        meshes.forEach(mesh => {
                            mesh.receiveShadows = true;
                            mesh.castShadows = true;
                        });
                        setCameraFocus(node);
                        sendToSR('initialModelLoaded');

                    } catch (error) {
                        console.error('Error loading GLB model:', error);
                    }
                }
                window.fixNumber = (param) => {
                    return parseFloat(parseFloat(param).toFixed(3));
                };
                window.hideTempSensorModel = ()=>{
                    let tempSensor = scene.getMeshByName('tempSensorModule');
                    if (tempSensor) {
                        tempSensor.setEnabled(false);
                    }
                };
                window.toggleMeshByName = (meshName, enabled = false)=>{
                    let mesh = scene.getMeshByName(meshName);
                    if (mesh) {
                        mesh.setEnabled(enabled);
                    }
                }
                window.loadTempSensorModel = ()=>{
                    let tempSensor = scene.getMeshByName('tempSensorModule');
                    if (tempSensor) {
                        tempSensor.setEnabled(true);
                        return;
                    }
                    let modelURL = 'https://files.renderdraw.us/public/demoassets/temperature_sensor.gltf';
                    let position = new BABYLON.Vector3(-0.7222, 0.706, -0.1253);
                    let rotation = new BABYLON.Vector3(0, -1.5726, 3.1416);
                    let scale = new BABYLON.Vector3(1.1205, -1.1205, 1.1205);

                    BABYLON.SceneLoader.ImportMesh(
                        "",
                        modelURL,
                        "",
                        scene,
                        function(meshes) {
                  
                            if (meshes.length > 0) {
                                let rootMesh = meshes[0];
                                rootMesh.name = 'tempSensorModule';
                                rootMesh.position = position;
                                rootMesh.rotation = rotation;
                                rootMesh.scaling = scale;

                                // Enable shadows
                                /*meshes.forEach(mesh => {
                                    mesh.receiveShadows = true;
                                    mesh.castShadows = true;
                                });*/

                                //setCameraFocus(rootMesh);
                            }
                        },
                        function(event) {
                            const progress = event.loaded / event.total;
                            console.log(`Loading progress: ${progress * 100}%`);
                        }
                    );
                };
                window.animateCameraToPosition = async (newPos) => {
                    console.log("rd.animateCameraToPosition");
                    // console.log("moving camera from " + scene.activeCamera.position + " to " + newPos);
                    let ease = new BABYLON.CubicEase();

                    ease.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);

                    const promise = new Promise((resolve, reject) => {
                        let camPosAnimEnded = (test) => {
                            resolve();
                        };

                        let aable2 = BABYLON.Animation.CreateAndStartAnimation(
                            "at4",
                            scene.activeCamera,
                            "position",
                            45,
                            90,
                            scene.activeCamera.position,
                            newPos,
                            0,
                            ease,
                            camPosAnimEnded
                        );
                        aable2.disposeOnEnd = true;
                    });

                    await promise;
                };
                window.positionCamera = async (param) => {
                    if (param.x && param.y && param.z) {
                        let x = param.x;
                        let y = param.y;
                        let z = param.z;

                        if (param.dontAnimateCamera) {
                            scene.activeCamera.position = new BABYLON.Vector3(x, y, z);
                        } else {
                            await animateCameraToPosition(new BABYLON.Vector3(x, y, z));
                        }
                    }

                    if (param.alpha) {
                        scene.activeCamera.alpha = (param.alpha * Math.PI) / 180;
                    }

                    if (param.beta) {
                        scene.activeCamera.beta = (param.beta * Math.PI) / 180;
                    }
                    if (param.upperRadiusLimit) {
                        // scene.activeCamera.upperRadiusLimit = param.upperRadiusLimit;
                    }

                    if (param.upperBetaLimit) {
                        scene.activeCamera.upperBetaLimit = param.upperBetaLimit;
                    }

                    sendToSR("positionCamera");
                };

                window.aimCamera = (param) => {
                    let currentAim = scene.activeCamera.getTarget();

                    if (param.uniqueId) {
                        let node = findNode({ uniqueId: param.uniqueId });

                        if (node) {
                            scene.activeCamera.focusOn([node], true);
                        }
                    } else if (param.nodeName) {
                        let node = findNode({
                            name: param.nodeName
                        });

                        if (node) {
                            scene.activeCamera.focusOn([node], true);
                        }
                    } else {
                        let x = param?.x;
                        let y = param?.y;
                        let z = param?.z;

                        if (!x) {
                            x = currentAim.x;
                        }

                        if (!y) {
                            y = currentAim.y;
                        }

                        if (!z) {
                            z = currentAim.z;
                        }

                        scene.activeCamera.setTarget(new BABYLON.Vector3(parseFloat(x), parseFloat(y), parseFloat(z)));
                    }

                    sendToSR("aimCamera");
                };
                window.getCameraPositionandTarget = () => {
                    let currentTarget = scene.activeCamera.getTarget();
                    let currentPosition = scene.activeCamera.position;
                    let param = {
                        target: {
                            x: fixNumber(currentTarget._x),
                            y: fixNumber(currentTarget._y),
                            z: fixNumber(currentTarget._z)
                        },
                        position: {
                            x: fixNumber(currentPosition.x),
                            y: fixNumber(currentPosition.y),
                            z: fixNumber(currentPosition.z),
                            alpha: fixNumber(BABYLON.Tools.ToDegrees(scene.activeCamera.alpha)),
                            beta: fixNumber(BABYLON.Tools.ToDegrees(scene.activeCamera.beta))
                        }
                    };
                    sendToSR("getCameraPositionandTarget", param);
                };
                let debugOn = false;
                // Message handler from LWC
                window.addEventListener('message', function(event) {
                    // Verify sender origin for security
                    //if (event.origin !== window.location.origin) return;
                    
                    const message = event.data;
                    
                    let parameter = event.data.parameter;
                    switch(message.type) {
                        case 'loadModel':
                            loadGLBModel(parameter.url, parameter.position);
                            break;
                        case 'addCube':
                            addCube();
                            break;
                        case 'getCameraPositionAndAim':
                            getCameraPositionandTarget();
                        break;
                        case 'setCameraPositionAndAim':
                            positionCamera(parameter.position);
                            aimCamera(parameter.target);
                        break;
                        case 'loadTempSensorModel':
                            loadTempSensorModel();
                        break;
                        case 'hideTempSensorModel':
                            hideTempSensorModel();
                        break;
                        case 'enableSceneDebugger':
                         // Add debug layer
                         if(!debugOn){
                            scene.debugLayer.hide();
                         } else{
                             scene.debugLayer.show({
                                 embedMode: true,
                                 overlay: true
                             });
                         }
                         debugOn = !debugOn;
                        break;
                        case 'toggleMeshByName':arguments
                            toggleMeshByName(parameter.name, parameter.enabled);    
                        break;
                        // Add other message types as needed
                    }
                });
                window.sendToSR = (messageType, payload) => {
                    let name = messageType;
                
                    if (payload == undefined) {
                        payload = {};
                    }
                    parent.postMessage(
                        {
                            name: name,
                            payload: payload
                        },
                        "*"
                    );
                };
                // Initialize scene
                let engine, scene, canvas;

                function initScene() {
                    
                    canvas = document.getElementById('renderCanvas');
                    engine = new BABYLON.Engine(canvas, true);
                    scene = new BABYLON.Scene(engine);
                   
                    const camera = new BABYLON.ArcRotateCamera('camera', 0, Math.PI / 3, 10, BABYLON.Vector3.Zero(), scene);
                    camera.attachControl(canvas, true);

                    new BABYLON.HemisphericLight('light', new BABYLON.Vector3(0, 1, 0), scene);
                    scene.clearColor = new BABYLON.Color3(1, 1, 1);
                    // Main key light (bright, warm light from front-right)
                    const keyLight = new BABYLON.DirectionalLight(
                        "keyLight",
                        new BABYLON.Vector3(-1, -2, -1),
                        scene
                    );
                    keyLight.intensity = 0.7;
                    keyLight.diffuse = new BABYLON.Color3(1, 0.95, 0.8);
                    keyLight.position = new BABYLON.Vector3(4, 4, 4);
                    
                    // Fill light (softer light from left side)
                    const fillLight = new BABYLON.DirectionalLight(
                        "fillLight",
                        new BABYLON.Vector3(1, -1, -0.5),
                        scene
                    );
                    fillLight.intensity = 0.4;
                    fillLight.diffuse = new BABYLON.Color3(0.9, 0.95, 1);
                    fillLight.position = new BABYLON.Vector3(-4, 3, 2);

                    // Rim light (back light for edge definition)
                    const rimLight = new BABYLON.DirectionalLight(
                        "rimLight",
                        new BABYLON.Vector3(0, -1, 1),
                        scene
                    );
                    rimLight.intensity = 0.3;
                    rimLight.diffuse = new BABYLON.Color3(1, 1, 1);
                    rimLight.position = new BABYLON.Vector3(0, 3, -4);

                    // Enable shadows
                    const shadowGenerator1 = new BABYLON.ShadowGenerator(1024, keyLight);
                    shadowGenerator1.useBlurExponentialShadowMap = true;
                    shadowGenerator1.blurKernel = 32;

                    const shadowGenerator2 = new BABYLON.ShadowGenerator(1024, fillLight);
                    shadowGenerator2.useBlurExponentialShadowMap = true;
                    shadowGenerator2.blurKernel = 32;
                    const ground = BABYLON.MeshBuilder.CreateGround("ground", {
                        width: 5,
                        height: 5
                    }, scene);

                    const groundMaterial = new BABYLON.StandardMaterial("groundMaterial", scene);
                    groundMaterial.diffuseColor = new BABYLON.Color3(0.95, 0.95, 0.95);
                    ground.material = groundMaterial;
                    ground.receiveShadows = true;

                    camera.lowerRadiusLimit = 0.01;
                    camera.upperBetaLimit = Math.PI / 2.1;

                    engine.runRenderLoop(() => {
                        scene.render();
                    });

                    window.addEventListener('resize', () => {
                        engine.resize();
                    });

                    // Notify parent that initialization is complete
                    sendToSR('sceneInitialized');
                }

                // Copy your existing loadGLBModel and addCube functions here
                // ... (keep the same implementation from your LWC)

                // Initialize the scene when the page loads
                window.addEventListener("message", async function (event) {
                    
                    let param = event.data;
				if (event.data && typeof event.data == "string") {
					param = JSON.parse(event.data);
				}

            });
                window.onload = initScene;
            </script>
        </body>
    </html>
</apex:page>